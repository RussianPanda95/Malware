# Author: RussianPanda
# Tested on sample: 4223da9b94fd65e3ed8832431c47fc13
# Reference: https://x.com/SquiblydooBlog/status/1717464614403735562?s=20

import re
from Crypto.Cipher import AES
import base64
import os

def xor_data(data, key):
    return bytes([b ^ key[i % len(key)] for i, b in enumerate(data)])

def xor_dec_file(input_file, key, output_file):
    with open(input_file, 'rb') as f:
        content = f.read()
    dec_content = xor_data(content, key.encode('utf-8'))
    with open(output_file, 'wb') as f:
        f.write(dec_content)

def extract_data(file_path):
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
        content = file.read()

    base64_blob_pattern = r'FromBase64String\(\'([A-Za-z0-9+/=]{100,})\'\)'
    base64_blob_matches = re.search(base64_blob_pattern, content)
    base64_blob = base64_blob_matches.group(1) if base64_blob_matches else None

    aes_key_pattern = r'\$A\.Key\s*=\s*@\(\[byte\]([^\)]+)\)'
    aes_key_matches = re.search(aes_key_pattern, content)
    aes_key = aes_key_matches.group(1) if aes_key_matches else None

    iv_pattern = r'\$A\.IV\s*=\s*@\(\[byte\]([^\)]+)\)'
    iv_matches = re.search(iv_pattern, content)
    iv = iv_matches.group(1) if iv_matches else None

    return {
        "base64_blob": base64_blob,
        "aes_key": aes_key,
        "iv": iv
    }

def convert_to_bytes(data_str):
    return bytes(map(int, data_str.split(',')))

def decrypt_aes_cbc(data, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.decrypt(data)

if __name__ == "__main__":
    input_path = input("Enter the path of the encrypted file: ")
    xor_key = input("Enter the XOR key: ")
    temp_path = "temp_decrypted_file.bin"
    xor_dec_file(input_path, xor_key, temp_path)

    # Extract and decrypt the data 
    data = extract_data(temp_path)

    encrypted_data = base64.b64decode(data["base64_blob"])
    aes_key_bytes = convert_to_bytes(data["aes_key"])
    iv_bytes = convert_to_bytes(data["iv"])
    decrypted_data = decrypt_aes_cbc(encrypted_data, aes_key_bytes, iv_bytes)

    # Save the decrypted data
    output_file = input("Enter the name of the output file to save the decrypted binary: ")
    with open(output_file, 'wb') as f:
        f.write(decrypted_data)
    print(f"Decrypted binary saved to: {output_file}")

    os.remove(temp_path)
